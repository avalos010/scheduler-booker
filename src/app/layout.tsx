import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/common/Navbar";
import { cookies } from "next/headers";
import { createSupabaseServerClient } from "@/lib/supabase-server";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Force dynamic rendering to re-evaluate auth on each request
export const dynamic = "force-dynamic";

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();

  // Debug: Log all cookies to see what's available
  const allCookies = cookieStore.getAll();
  console.log(
    "üîç Layout: All cookies:",
    allCookies.map((c) => ({
      name: c.name,
      value: c.value.substring(0, 50) + "...",
    }))
  );

  // Look specifically for Supabase auth cookies
  const supabaseCookies = allCookies.filter((c) => c.name.includes("sb-"));
  console.log(
    "üîç Layout: Supabase cookies:",
    supabaseCookies.map((c) => ({
      name: c.name,
      value: c.value.substring(0, 50) + "...",
    }))
  );

  // Debug: Check environment variables
  console.log("üîç Layout: Environment check:", {
    hasSupabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
    hasSupabaseKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    supabaseUrlLength: process.env.NEXT_PUBLIC_SUPABASE_URL?.length,
    supabaseKeyLength: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY?.length,
  });

  const supabase = await createSupabaseServerClient();

  // Get session on server side
  const {
    data: { session },
    error,
  } = await supabase.auth.getSession();
  const isAuthed = !!session;

  console.log("üîç Layout: Supabase auth result:", {
    hasSession: !!session,
    userId: session?.user?.id,
    error: error?.message,
    timestamp: new Date().toISOString(),
  });

  return (
    <html lang="en">
      <head>
        <meta
          httpEquiv="Cache-Control"
          content="no-cache, no-store, must-revalidate"
        />
        <meta httpEquiv="Pragma" content="no-cache" />
        <meta httpEquiv="Expires" content="0" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navbar isAuthed={isAuthed} />
        {children}
      </body>
    </html>
  );
}
